
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid())
  nickname     String?
  email        String?          @unique
  profileImage String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?        

  providers    AuthProvider[]   // Kakao, Google 등 여러 개 연결 가능
  refreshTokens RefreshToken[]  // 추가
  academies Academy[]
  exerciseUsers ExerciseUser[]
  academyManagers AcademyManager[]
}

model Brand{
  id String @id @default(uuid())
  name String

  academies Academy[]
}

model Academy{
  id String @id @default(uuid())
  name String
  address String
  phoneNumber String?
  logoUrl String?
  description String?
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  deletedAt DateTime?
  
  // relations
  owner User @relation(fields: [ownerId], references: [id])
  ownerId String

  academyManagers AcademyManager[]
  exercises Exercise[]

  brand Brand? @relation(fields: [brandId], references: [id])
  brandId String?
}

model AcademyManager{
  id String @id @default(uuid())

  academy Academy @relation(fields: [academyId], references: [id])
  academyId String

  user User @relation(fields: [userId], references: [id])
  userId String
}

model Exercise{
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academy Academy @relation(fields: [academyId], references: [id])
  academyId String

  exerciseUsers ExerciseUser[]

}

model ExerciseUser{
  id String @id @default(uuid())

  exercise Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String

  user User @relation(fields: [userId], references: [id])
  userId String


}

// Auth
model AuthProvider {
  id        String   @id @default(uuid())
  provider  String   // "kakao", "google", etc
  providerId String  // 외부 서비스의 고유 사용자 ID
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([provider, providerId]) // 같은 provider의 같은 사용자 중복 금지
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}